# PRD: Social Archiver 공유 페이지 재구축 (SvelteKit)

## 1. 프로젝트 개요

### 배경
현재 Social Archiver의 공유 페이지는 Cloudflare Workers의 인라인 HTML/CSS로 구현되어 있어 다음과 같은 한계가 있습니다:
- 디자인 일관성 부족 및 유지보수 어려움
- 단일 포스트만 공유 가능 (사용자 타임라인 없음)
- 템플릿 문자열 기반으로 확장성 제한
- CSS 파싱 에러 및 HTML 엔티티 이스케이프 문제

### 목표
SvelteKit 기반의 독립적인 공유 웹 애플리케이션을 구축하여 사용자가 퍼블리시한 포스트를 타임라인 형태로 제공하고, 플러그인과 일관된 디자인을 유지합니다.

### 범위
- **In Scope**: SvelteKit 웹 앱, 사용자 타임라인, 개별 포스트 페이지, Workers API 확장, Cloudflare Pages 배포
- **Out of Scope**: 플러그인 UI 변경, 기존 Workers 아키텍처 변경 (API 확장만), 검색/필터 기능 (Phase 2)

---

## 2. 성공 지표 (KPI)

1. **성능**: 페이지 로딩 시간 < 1초 (Lighthouse 90+ 점수)
2. **SEO**: Open Graph 태그로 소셜 미디어 미리보기 100% 지원
3. **프라이버시**: 공유하지 않은 포스트 0% 노출
4. **사용성**: 모바일/데스크톱 반응형 100% 지원
5. **배포**: Cloudflare Pages 무료 티어 내 운영 (비용 $0/월)

---

## 3. 사용자 스토리

### US-1: 사용자 타임라인 조회
**As a** 공유 링크를 받은 방문자
**I want to** 특정 사용자가 공유한 모든 포스트를 타임라인 형태로 보고 싶다
**So that** 해당 사용자의 아카이브된 콘텐츠를 한눈에 탐색할 수 있다

**Acceptance Criteria:**
- `/share/{username}` 접속 시 해당 사용자가 공유 버튼으로 퍼블리시한 포스트 목록 표시
- 최신 포스트가 상단에 표시 (내림차순 정렬)
- 각 포스트는 카드 형태로 미리보기 제공 (플랫폼 아이콘, 작성자, 시간, 콘텐츠 일부)
- 공유하지 않은 포스트는 절대 표시되지 않음
- 존재하지 않는 사용자명 접속 시 404 페이지 표시

### US-2: 개별 포스트 상세 보기
**As a** 공유 링크를 받은 방문자
**I want to** 특정 포스트의 전체 내용을 상세하게 보고 싶다
**So that** 이미지, 텍스트, 링크 등 전체 콘텐츠를 확인할 수 있다

**Acceptance Criteria:**
- `/share/{username}/{postId}` 접속 시 개별 포스트 전체 내용 표시
- 마크다운 렌더링 (이미지, 리스트, 링크 등)
- R2에 업로드된 이미지 정상 표시
- "View Original Post" 링크로 원본 소셜 미디어 게시글 접근
- See more/less 기능으로 긴 콘텐츠 접기/펼치기
- 플러그인 타임라인 뷰와 동일한 디자인

### US-3: 포스트 공유 (플러그인)
**As a** Social Archiver 플러그인 사용자
**I want to** 타임라인에서 공유 버튼을 눌러 특정 포스트를 웹에 퍼블리시하고 싶다
**So that** 다른 사람들과 아카이브된 콘텐츠를 공유할 수 있다

**Acceptance Criteria:**
- 타임라인 카드에 공유 버튼 존재 (이미 구현됨)
- 공유 버튼 클릭 시 Workers API 호출하여 KV 저장
- 공유 URL 클립보드에 복사
- 공유된 포스트는 사용자 타임라인에 자동 추가
- YAML frontmatter에 `share: true`, `shareUrl` 저장

### US-4: 반응형 디자인
**As a** 모바일 기기 사용자
**I want to** 스마트폰에서도 타임라인과 포스트를 편하게 보고 싶다
**So that** 어떤 기기에서든 동일한 경험을 할 수 있다

**Acceptance Criteria:**
- 768px 이하 모바일 화면에서 레이아웃 자동 조정
- 터치 인터랙션 지원 (스크롤, 탭)
- 이미지 자동 크기 조정
- 텍스트 가독성 유지 (최소 폰트 크기, 적절한 line-height)

### US-5: SEO 및 소셜 미디어 미리보기
**As a** 공유 링크를 소셜 미디어에 올리는 사용자
**I want to** 링크 미리보기가 예쁘게 표시되길 원한다
**So that** 더 많은 사람들이 클릭하도록 유도할 수 있다

**Acceptance Criteria:**
- Open Graph 메타 태그 (og:title, og:description, og:image)
- Twitter Card 메타 태그
- 포스트의 첫 이미지를 og:image로 사용
- 동적 메타 태그 (페이지별로 다른 내용)

---

## 4. 기능 요구사항

### 4.1. SvelteKit 웹 애플리케이션

#### 4.1.1. 프로젝트 초기화
- [ ] SvelteKit 프로젝트 생성 (`share-web` 디렉토리)
- [ ] Tailwind CSS 설정
- [ ] Cloudflare Pages adapter 설치
- [ ] TypeScript 설정
- [ ] 플러그인 타입 정의 공유 (`src/types/post.ts`)

#### 4.1.2. 라우팅 구조
```
src/routes/
├── +layout.svelte                    # 전역 레이아웃
├── +layout.ts                        # 전역 설정
└── share/
    └── [username]/
        ├── +page.svelte              # 타임라인 페이지
        ├── +page.ts                  # 타임라인 데이터 로드
        └── [postId]/
            ├── +page.svelte          # 개별 포스트 페이지
            └── +page.ts              # 포스트 데이터 로드
```

#### 4.1.3. 컴포넌트 구조
```
src/lib/components/
├── PostCard.svelte                   # 포스트 카드 (타임라인/상세)
├── Timeline.svelte                   # 타임라인 컨테이너
├── UserHeader.svelte                 # 사용자 헤더 (선택)
├── PlatformIcon.svelte               # 플랫폼 아이콘 (Facebook, Instagram 등)
├── SeeMoreButton.svelte              # See more/less 토글
└── LoadingSpinner.svelte             # 로딩 상태
```

#### 4.1.4. 타임라인 페이지 (`/share/{username}`)
- [ ] 사용자명으로 공유 포스트 목록 가져오기 (GET /api/users/{username}/posts)
- [ ] 포스트 카드 그리드 레이아웃 (최대 너비 680px)
- [ ] 최신순 정렬
- [ ] 각 카드에 플랫폼 아이콘, 작성자, 시간, 콘텐츠 미리보기 (200자)
- [ ] 카드 클릭 시 개별 포스트 페이지로 이동
- [ ] 빈 타임라인 시 "No posts shared yet" 메시지
- [ ] 404 처리 (존재하지 않는 사용자)

#### 4.1.5. 개별 포스트 페이지 (`/share/{username}/{postId}`)
- [ ] postId로 포스트 데이터 가져오기 (GET /api/share/{postId})
- [ ] 전체 마크다운 콘텐츠 렌더링
- [ ] R2 이미지 표시
- [ ] 500자 이상 콘텐츠는 "See more" 버튼으로 접기/펼치기
- [ ] "View Original Post" 링크
- [ ] "Archived with Social Archiver" 푸터
- [ ] 동적 메타 태그 (제목, 설명, 이미지)
- [ ] 404 처리 (존재하지 않는 포스트)

#### 4.1.6. 스타일링
- [ ] Tailwind CSS 다크 테마 (#202020 배경)
- [ ] 플러그인과 동일한 색상 팔레트
  - Background primary: #202020
  - Background secondary: #161616
  - Text normal: #dcddde
  - Text muted: #999
  - Text accent: #7c7c7c
  - Border: #3a3a3a
- [ ] 카드 호버 효과 (transform, shadow)
- [ ] 플랫폼 아이콘 투명도 애니메이션
- [ ] 반응형 브레이크포인트 (768px)

#### 4.1.7. API 클라이언트
```typescript
// src/lib/api/client.ts
export async function getUserPosts(username: string) {
  const response = await fetch(
    `https://social-archiver-api.junlim.org/api/users/${username}/posts`
  );
  return response.json();
}

export async function getPost(postId: string) {
  const response = await fetch(
    `https://social-archiver-api.junlim.org/api/share/${postId}`
  );
  return response.json();
}
```

### 4.2. Cloudflare Workers API 확장

#### 4.2.1. 사용자 포스트 목록 API (NEW)
- [ ] `GET /api/users/{username}/posts` 엔드포인트 생성
- [ ] KV에서 `user_posts:{username}` 키로 포스트 ID 목록 가져오기
- [ ] 각 포스트 ID로 메타데이터 병렬 조회
- [ ] 결과 JSON 반환 (포스트 목록)
- [ ] 404 처리 (사용자 없음)
- [ ] CORS 헤더 설정

**응답 스키마:**
```typescript
{
  "success": true,
  "data": {
    "username": "johndoe",
    "posts": [
      {
        "shareId": "abc123",
        "title": "...",
        "platform": "instagram",
        "author": "...",
        "createdAt": "2025-10-28T10:00:00Z",
        "previewText": "...",  // 첫 200자
        "thumbnail": "https://..."  // 첫 이미지 URL
      }
    ]
  }
}
```

#### 4.2.2. 공유 API 수정 (사용자 인덱스 추가)
- [ ] POST /api/share 엔드포인트에 사용자 인덱스 로직 추가
- [ ] `request.metadata.author` 또는 `username` 추출
- [ ] KV의 `user_posts:{username}` 배열에 shareId 추가 (중복 방지)
- [ ] 로깅 추가 (사용자 타임라인 추가 이벤트)

#### 4.2.3. 공유 해제 API (선택, Phase 2)
- [ ] `DELETE /api/share/{shareId}` 엔드포인트
- [ ] 사용자 인덱스에서 제거
- [ ] KV에서 share 데이터 삭제
- [ ] R2 이미지 삭제 (선택)

#### 4.2.4. KV 스키마
```typescript
// Key: user_posts:{username}
// Value: string[] (shareId 목록)
["abc123", "def456", "ghi789"]

// Key: share:{shareId} (기존)
{
  "shareId": "abc123",
  "metadata": { ... },
  "content": "...",
  "createdAt": "...",
  "expiresAt": "...",
  "viewCount": 42
}
```

### 4.3. 플러그인 수정 (최소)

#### 4.3.1. 공유 시 사용자명 전달
- [ ] `PostCardRenderer.createShare()` 메서드 수정
- [ ] `shareRequest.metadata.username` 또는 `author` 필드 추가
- [ ] 설정에서 사용자명 가져오기 (`plugin.settings.userName`)
- [ ] 없으면 "anonymous" 기본값

---

## 5. 기술 스펙

### 5.1. 기술 스택
- **Frontend**: SvelteKit 2.x + TypeScript 5.x
- **Styling**: Tailwind CSS 3.x
- **API**: Cloudflare Workers (Hono)
- **Database**: Cloudflare KV
- **Storage**: Cloudflare R2
- **Hosting**: Cloudflare Pages
- **Build**: Vite (SvelteKit 내장)

### 5.2. 폴더 구조
```
obsidian-social-archiver/
├── src/                                # Obsidian Plugin
├── workers/                            # Cloudflare Workers (API)
│   └── src/
│       ├── handlers/
│       │   ├── user-posts.ts          # NEW
│       │   └── share.ts               # Modified
│       └── index.ts
└── share-web/                          # SvelteKit App (NEW)
    ├── src/
    │   ├── routes/
    │   ├── lib/
    │   │   ├── components/
    │   │   ├── api/
    │   │   └── types/
    │   └── app.css
    ├── static/
    ├── svelte.config.js
    ├── tailwind.config.js
    ├── tsconfig.json
    └── package.json
```

### 5.3. 의존성
```json
// share-web/package.json
{
  "dependencies": {
    "@sveltejs/kit": "^2.0.0",
    "@sveltejs/adapter-cloudflare": "^4.0.0",
    "marked": "^11.0.0"
  },
  "devDependencies": {
    "tailwindcss": "^3.4.0",
    "typescript": "^5.0.0",
    "vite": "^5.0.0"
  }
}
```

### 5.4. 환경 변수
```typescript
// share-web/.env
PUBLIC_API_URL=https://social-archiver-api.junlim.org
```

### 5.5. 배포 설정
```toml
# share-web/wrangler.toml
name = "social-archiver-share"
pages_build_output_dir = "build"

[[pages.bindings]]
type = "kv_namespace"
binding = "SHARE_LINKS"
id = "bbb1768a9f6c45fc91a98eda7a99f2ea"

[[pages.bindings]]
type = "r2_bucket"
binding = "R2_BUCKET"
bucket_name = "social-archiver-shares"
```

---

## 6. 비기능 요구사항

### 6.1. 성능
- [ ] 타임라인 페이지 로딩 < 1초 (10개 포스트 기준)
- [ ] 개별 포스트 로딩 < 500ms
- [ ] Lighthouse Performance 점수 90+
- [ ] 번들 크기 < 100KB (gzipped)
- [ ] 이미지 lazy loading

### 6.2. SEO
- [ ] 동적 메타 태그 (title, description)
- [ ] Open Graph 태그
- [ ] Twitter Card 태그
- [ ] Sitemap 생성 (선택, Phase 2)
- [ ] robots.txt 설정

### 6.3. 보안
- [ ] HTTPS 강제
- [ ] XSS 방지 (마크다운 렌더링 sanitization)
- [ ] CSRF 방지 (읽기 전용이므로 낮은 우선순위)
- [ ] Rate limiting (Workers에서 처리)
- [ ] 공유하지 않은 포스트 절대 노출 금지

### 6.4. 접근성
- [ ] WCAG 2.1 AA 준수
- [ ] 키보드 네비게이션 지원
- [ ] 스크린 리더 호환 (aria-label)
- [ ] 색상 대비 4.5:1 이상
- [ ] 포커스 인디케이터

### 6.5. 브라우저 지원
- [ ] Chrome 90+
- [ ] Firefox 88+
- [ ] Safari 14+
- [ ] Edge 90+
- [ ] 모바일 Safari (iOS 14+)
- [ ] 모바일 Chrome (Android 11+)

---

## 7. 제약사항 및 가정

### 7.1. 제약사항
- Cloudflare Pages 무료 티어 제한 (500 빌드/월, 100k 요청/일)
- KV 무료 티어 제한 (100k 읽기/일, 1k 쓰기/일)
- R2 무료 티어 제한 (10GB 저장, 1백만 Class B 작업/월)
- 공유 포스트 만료 시간 (무료: 30일, 유료: 영구)
- 사용자명은 영문, 숫자, 하이픈만 허용 (특수문자 제외)

### 7.2. 가정
- 플러그인 사용자는 `settings.userName` 설정 완료
- 공유 버튼 클릭 시 인터넷 연결 가능
- Workers API는 항상 가용 (99.9% uptime)
- 사용자명은 변경되지 않음 (변경 시 기존 타임라인 URL 유지)
- 한 사용자당 평균 100개 미만의 공유 포스트

---

## 8. 마일스톤 및 일정

### Phase 1: 프로젝트 초기화 (1-2시간)
- [ ] SvelteKit 프로젝트 생성
- [ ] Tailwind CSS 설정
- [ ] Cloudflare adapter 설치
- [ ] 기본 라우팅 구조 생성
- [ ] 타입 정의 공유

**완료 조건**: `npm run dev` 실행 시 빈 페이지 표시

### Phase 2: Workers API 확장 (2-3시간)
- [ ] GET /api/users/{username}/posts 엔드포인트
- [ ] POST /api/share 수정 (사용자 인덱스 추가)
- [ ] KV 스키마 구현
- [ ] 테스트 (Postman/curl)
- [ ] CORS 설정

**완료 조건**: API 엔드포인트 정상 응답, 플러그인에서 공유 시 사용자 인덱스 업데이트

### Phase 3: SvelteKit 컴포넌트 구현 (4-6시간)
- [ ] PostCard 컴포넌트
- [ ] Timeline 컴포넌트
- [ ] 타임라인 페이지 (+page.svelte, +page.ts)
- [ ] 개별 포스트 페이지
- [ ] API 클라이언트 (src/lib/api/client.ts)
- [ ] 스타일링 (Tailwind)

**완료 조건**: 로컬에서 타임라인 및 개별 포스트 정상 표시

### Phase 4: 배포 및 통합 (1-2시간)
- [ ] Cloudflare Pages 프로젝트 생성
- [ ] wrangler.toml 설정
- [ ] 빌드 및 배포
- [ ] 커스텀 도메인 연결 (선택)
- [ ] 플러그인 공유 URL 업데이트

**완료 조건**: https://share.junlim.org/share/username 접속 시 타임라인 표시

### Phase 5: 테스트 및 최적화 (1-2시간)
- [ ] 크로스 브라우저 테스트
- [ ] 모바일 테스트
- [ ] Lighthouse 점수 측정
- [ ] 이미지 최적화
- [ ] 에러 처리 검증

**완료 조건**: Lighthouse 90+ 점수, 모든 에러 케이스 처리

**총 예상 시간: 9-15시간** (1.5-2일)

---

## 9. 리스크 및 완화 방안

### 9.1. 리스크: KV 읽기 제한 초과
**가능성**: Medium
**영향**: High
**완화 방안**:
- 캐싱 전략 (Cloudflare Cache API)
- 사용자 타임라인 페이지네이션 (Phase 2)
- 무료 티어 모니터링 (Cloudflare Dashboard)

### 9.2. 리스크: 플러그인과 스타일 불일치
**가능성**: Medium
**영향**: Medium
**완화 방안**:
- Tailwind 설정 파일 공유
- CSS 변수 문서화
- 정기적 시각적 비교 테스트

### 9.3. 리스크: 사용자명 중복/충돌
**가능성**: Low
**영향**: Low
**완화 방안**:
- 사용자명 검증 (영문, 숫자, 하이픈만)
- 대소문자 구분 없음 (모두 소문자로 저장)
- 충돌 시 사용자에게 알림

### 9.4. 리스크: 마이그레이션 시 기존 공유 링크 깨짐
**가능성**: High
**영향**: Critical
**완화 방안**:
- 기존 `/share/{postId}` 경로 유지 (리다이렉션)
- Workers에서 사용자명 추출 불가 시 "anonymous"로 매핑
- 점진적 마이그레이션 (신규 공유부터 새 구조 사용)

### 9.5. 리스크: 개발 일정 지연
**가능성**: Medium
**영향**: Medium
**완화 방안**:
- MVP 기능만 Phase 1에 포함
- 검색/필터는 Phase 2로 연기
- 단계별 완료 조건 명확화

---

## 10. 테스트 계획

### 10.1. 단위 테스트
- [ ] API 클라이언트 함수 (getUserPosts, getPost)
- [ ] 유틸리티 함수 (날짜 포맷, 텍스트 자르기)
- [ ] Svelte 컴포넌트 (Vitest)

### 10.2. 통합 테스트
- [ ] Workers API → KV 읽기/쓰기
- [ ] SvelteKit → Workers API 호출
- [ ] 플러그인 → Workers API (공유 버튼)

### 10.3. E2E 테스트 (Playwright)
- [ ] 타임라인 페이지 로딩
- [ ] 포스트 카드 클릭 → 상세 페이지 이동
- [ ] 404 페이지 표시
- [ ] 모바일 반응형

### 10.4. 수동 테스트
- [ ] 플러그인에서 포스트 공유 → 타임라인 확인
- [ ] 다양한 플랫폼 (Facebook, Instagram, X, etc.) 포스트 렌더링
- [ ] 긴 콘텐츠 See more/less 동작
- [ ] 소셜 미디어 미리보기 (Twitter, Facebook)

---

## 11. 출시 계획

### 11.1. Soft Launch (내부 테스트)
- 개발자 본인 및 베타 테스터 3-5명
- 타임라인 URL 비공개 공유
- 피드백 수집 및 버그 수정

### 11.2. Public Launch
- 플러그인 릴리즈 노트에 타임라인 기능 언급
- 블로그 포스트 작성 (선택)
- Obsidian 커뮤니티 포럼에 공유
- GitHub README 업데이트

### 11.3. Phase 2 기능 (향후)
- [ ] 타임라인 페이지네이션
- [ ] 검색 기능
- [ ] 플랫폼별 필터
- [ ] RSS 피드
- [ ] 커스텀 도메인 지원
- [ ] 다크/라이트 모드 토글
- [ ] 공유 통계 (조회수, 클릭수)

---

## 12. 문서화

### 12.1. 개발자 문서
- [ ] API 엔드포인트 스펙 (Swagger/OpenAPI)
- [ ] KV 스키마 문서
- [ ] SvelteKit 프로젝트 구조 README
- [ ] 로컬 개발 환경 설정 가이드

### 12.2. 사용자 문서
- [ ] 공유 기능 사용 가이드 (플러그인 설정)
- [ ] 타임라인 URL 공유 방법
- [ ] 프라이버시 설정 (공유 해제)
- [ ] FAQ

---

## 13. 완료 정의 (Definition of Done)

✅ 프로젝트 완료 조건:
1. `/share/{username}` 접속 시 타임라인 정상 표시
2. `/share/{username}/{postId}` 접속 시 개별 포스트 정상 표시
3. 플러그인 공유 버튼 클릭 시 타임라인에 자동 추가
4. 공유하지 않은 포스트는 타임라인에 표시 안됨
5. Lighthouse Performance 점수 90+
6. 모바일/데스크톱 반응형 정상 작동
7. Open Graph 태그로 소셜 미디어 미리보기 지원
8. Cloudflare Pages 배포 완료
9. 모든 테스트 통과 (단위, 통합, E2E)
10. 문서 작성 완료 (개발자, 사용자)

---

## 14. 부록

### 14.1. 참고 자료
- [SvelteKit 공식 문서](https://kit.svelte.dev/docs)
- [Cloudflare Pages 문서](https://developers.cloudflare.com/pages/)
- [Tailwind CSS 문서](https://tailwindcss.com/docs)
- [Marked.js (마크다운 파서)](https://marked.js.org/)

### 14.2. 디자인 시안
- 플러그인 타임라인 스크린샷 (참고)
- Figma 목업 (선택)

### 14.3. 경쟁 제품 분석
- N/A (타 Social Archiver 플러그인 없음)

---

**작성자**: AI Assistant
**작성일**: 2025-10-30
**버전**: 1.0
**승인 상태**: Pending Review
